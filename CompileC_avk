NewFU={Mnemo="Main_Bus" MkBegRange=1000 FUType=FUBusNew} // Описание Bus

\\ Для создания индексного файла сначала надо запустить программу !!!!
 CapsManager.IndexVectCreate=20000
 CapsManager.IpIcIdOutMk=MainBus.IpIcIdSet
 CapsManager.IpIcIdOutMk=VariableManager.IpIcIdSet
 CapsManager.IpIcIdOutMk=ListSyntez.IpIcIdSet
 MainBus.ModeSet=1
\\ -------------------------------------- \\
MainBus.FUTypeCorrectSet=-96 // Корректировка номера типа ФУ для переноса на новую ОА-платформу

NewFU={Mnemo="Console" FUType=FUConsNew Hint="Консоль для вывода логов"}
NewFU={Mnemo="Str_Gen" FUType=FUStrGenNew Hint="Генератор строк"}
NewFU={Mnemo="Stack" FUType=FUListNew Hint="Программный стек для генераци ОА-графа"}
NewFU={Mnemo="MnemoTable" FUType=FUListNew Hint="Таблица мнемоник"}
NewFU={Mnemo="Lex" FUType=FULexNew Hint="Устройство лексического разбора"}
NewFU={Mnemo="MkTable" FUType=FUListNew Hint="ФУ для Поиска МК"}
NewFU={Mnemo="OAList" FUType=FUListNew Hint="ФУ для генерации ОА-графа"}
NewFU={Mnemo="ALUG" FUType=FUALUNew Hint="ФУ для создания нового ФУ"}

NewFU={Mnemo="Root" FUType=FUListNew Hint="Начальное состояние"}
NewFU={Mnemo="VarRecv" FUType=FUListNew Hint="Получена переменная"}
NewFU={Mnemo="StreamBody" FUType=FUListNew Hint="Получен символ потока или барьера"}
NewFU={Mnemo="IfWait" FUType=FUListNew Hint="Ожидание условия if"}
NewFU={Mnemo="PreALE" FUType=FUListNew Hint="Получена переменная, милликоманда, вектор или константа"}
NewFU={Mnemo="ALE" FUType=FUListNew Hint="Получен знак операции АЛВ"}
NewFU={Mnemo="ElifWait" FUType=FUListNew Hint="Ожидание условия elif"}
NewFU={Mnemo="ElseWait" FUType=FUListNew Hint="Ожидание тела else"}
NewFU={Mnemo="CaseWait" FUType=FUListNew Hint="Ожидание операнда case"}
NewFU={Mnemo="CaseALE" FUType=FUListNew Hint="Ожидание АЛВ для операнда case"}
NewFU={Mnemo="FuncBrackWait" FUType=FUListNew Hint="Ожидание скобки для функции"}
NewFU={Mnemo="FuncParWait" FUType=FUListNew Hint="Ожидание ввода параметров функции"}
NewFU={Mnemo="WaitVar" FUType=FUListNew Hint="Ожидание параметра по ссылке"}
NewFU={Mnemo="ForWait" FUType=FUListNew Hint="Ожидание параметров цикла"}
NewFU={Mnemo="ForMap" FUType=FUListNew Hint="Ожидание вектора для цикла"}
NewFU={Mnemo="FirstArgRecv" FUType=FUListNew Hint="Первый параметр задания интервала получен"}
NewFU={Mnemo="SecArgWait" FUType=FUListNew Hint="Ожидание второго параметра задания интервала"}
NewFU={Mnemo="SecArgRecv" FUType=FUListNew Hint="Второй параметр задания интервала получен"}
NewFU={Mnemo="ThirdArgWait" FUType=FUListNew Hint="Ожидание третьего параметра задания интервала"}
NewFU={Mnemo="ThirdArgRecv" FUType=FUListNew Hint="Третий параметр задания интервала получен"}

MainBus.PartialResetSet \\ Запомнить число созданных ФУ
MainBus.ModeSet=2

Sep*-4
Var*-14
//Const*-13
//Mk*-24
FU*-300 // Индекс ФУ
MkForFU*-301 // Мк для ФУ
IC*-102 // Мк для ФУ
//FUType*-22
//NameAtr*-72
FUTemplate*-303
MkExec*-304 // МК для последующего выполнения
BackVar*-305 // Переменная для обратной записи
Vect*-306 // Вектор нагрузок
MkBrack*-307 // Скобка для милликоманд FU(.Mk .Mk)
//Func*-78 Атрибут функций

LineAtr*-6 // Метка линии списка

\**\Root.Set=
>{Vect Var Lex.ReceiverMkSet=VarRecv.FindAnd}
>{Mnemo="if" Lex.ReceiverMkSet=IfWait.FindAnd}
>{Mnemo="elif" Lex.ReceiverMkSet=ElifWait.FindAnd}
>{Mnemo="else" Lex.ReceiverMkSet=ElseWait.FindAnd}
>{Mnemo="case" Lex.ReceiverMkSet=CaseWait.FindAnd}
>{Func Lex.ReceiverMkSet=FuncBrackWait.FindAnd}
>{Mnemo="for" Lex.ReceiverMkSet=ForWait.FindAnd}
>{Mnemo="{" Lex.ReceiverMkSet=Root.FindAnd}
>{Mnemo="{" Lex.ReceiverMkSet=Root.FindAnd}
>{Mnemo="}" Lex.ReceiverMkSet=Root.FindAnd}
>{Mnemo="loop" Lex.ReceiverMkSet=Root.FindAnd}
>{Mnemo="break" Lex.ReceiverMkSet=Root.FindAnd}



\**\VarRecv.Set=
>{Sep=">>" Sep="|>>" Lex.ReceiverMkSet=StreamBody.FindAnd
Console.OutLn="VarRecv >>"
}

\**\StreamBody.Set=
>{Mnemo="if" Lex.ReceiverMkSet=IfWait.FindAnd}
>{Var Mk Vect Const Lex.ReceiverMkSet=PreALE.FindAnd}

\**\IfWait.Set=
>{Var Mk Vect Const Lex.ReceiverMkSet=PreALE.FindAnd}

\**\PreALE.Set=
>{} //????ALE OPeration????

\**\ALE.Set=
>{} //????Unconditional jump????

\**\ElifWait.Set=
>{Var Mk Vect Const Lex.ReceiverMkSet=PreALE.FindAnd}

\**\ElseWait.Set=
>{} //????Unconditional jump????

\**\CaseWait.Set=
>{Var Vect Const Lex.ReceiverMkSet=CaseALE.FindAnd}
>{Mnemo="(" Lex.ReceiverMkSet=ALE.FindAnd}

\**\CaseALE.Set=
>{} //????Unconditional jump????

\**\FuncBrackWait.Set=
>{Mnemo="(" Lex.ReceiverMkSet=FuncParWait.FindAnd}

\**\FuncParWait.Set=
>{Var Mk Vect Const Lex.ReceiverMkSet=ALE.FindAnd}
>{Mnemo="," Lex.ReceiverMkSet=FuncParWait.FindAnd}
>{Mnemo="$" Lex.ReceiverMkSet=WaitVar.FindAnd}
>{Mnemo=")" Lex.ReceiverMkSet=Root.FindAnd}

\**\WaitVar.Set=
>{Vect Lex.ReceiverMkSet=FuncParWait.FindAnd}

\**\ForWait.Set=
>{Mnemo="@" Lex.ReceiverMkSet=ForMap.FindAnd}
>{Mnemo="(" Lex.ReceiverMkSet=ALE.FindAnd} //????must be special ALE state????
>{Var Vect Const Lex.ReceiverMkSet=FirstArgRecv.FindAnd}
>{Mnemo=":" Lex.ReceiverMkSet=SecArgWait.FindAnd}

\**\ForMap.Set=
>{Vect Lex.ReceiverMkSet=VarRecv.FindAnd}

\**\FirstArgRecv.Set=
>{Sep=">>" Sep="|>>" Lex.ReceiverMkSet=Root.FindAnd}
>{Mnemo=":" Lex.ReceiverMkSet=SecArgWait.FindAnd}
>{} //????ALE OPeration????

\**\SecArgWait.Set=
>{Mnemo="(" Lex.ReceiverMkSet=ALE.FindAnd} //????must be special ALE state????
>{Var Vect Const Lex.ReceiverMkSet=SecArgRecv.FindAnd}
>{Mnemo=":" Lex.ReceiverMkSet=ThirdArgWait.FindAnd}

\**\SecArgRecv.Set=
>{Sep=">>" Sep="|>>" Lex.ReceiverMkSet=Root.FindAnd}
>{Mnemo=":" Lex.ReceiverMkSet=ThirdArgWait.FindAnd}
>{} //????ALE OPeration????


\**\ThirdArgWait.Set=
>{Mnemo="(" Lex.ReceiverMkSet=ALE.FindAnd} //????must be special ALE state????
>{Var Vect Const Lex.ReceiverMkSet=ThirdArgRecv.FindAnd}

\**\ThirdArgRecv.Set=
>{Sep=">>" Sep="|>>" Lex.ReceiverMkSet=Root.FindAnd}
>{} //????ALE OPeration????


Lex.Lexing="NewFU={FUType=FUCons Name=""Cons"" Hint=""Консоль""}  Cons.OutLn=Cons.OutLn=Cons.OutLn"

Console.OutLn="***************** MnemoList"

//MnemoTable.OutMk=Console.OutLn
Console.OutLn="***************** OAList"

OAList.OutMk=Console.OutLn
Console.OutLn="-----------------Stack:"
Stack.OutMk=Console.OutLn
Console.OutLn="---- Programm out ----"
OAList.LastOutMk=Main_Bus.ProgExec