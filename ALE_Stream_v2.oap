NewFU={Mnemo="Main_Bus" MkBegRange=1000 FUType=FUBusNew} // Описание Bus

\\ Для создания индексного файла сначала надо запустить программу !!!!

 CapsManager.IndexVectCreate=20000
 CapsManager.IpIcIdOutMk=MainBus.IpIcIdSet
 CapsManager.IpIcIdOutMk=VariableManager.IpIcIdSet
 CapsManager.IpIcIdOutMk=ListSyntez.IpIcIdSet
 MainBus.ModeSet=1 
\\ -------------------------------------- \\
MainBus.FUTypeCorrectSet=-96 // Корректировка номера типа ФУ для переноса на новую ОА-платформу

NewFU={Mnemo="LogCons" FUType=FUConsNew Mnemo="Консоль для вывода соощений компилятора"}
NewFU={Mnemo="Lex" FUType=FULexNew}
NewFU={Mnemo="ALUG" FUType=FUALUG}
NewFU={Mnemo="Stack" FUType=FUListNew Hint="Стек приоритетов арифметического графа"}
NewFU={Mnemo="MnemoTable" FUType=FUListNew Hint="Таблица мнемоник"}
NewFU={Mnemo="OpPriority" FUType=FUListNew Hint="Таблица приоритетов операций"}
NewFU={Mnemo="OperateionTranslate" FUType=FUListNew Hint="Транслирование операций для FUALU"}
NewFU={Mnemo="ALEManager" FUType=FUStreamManager Hint="Транслирование операций для FUALU"}

NewFU={Mnemo="ALEStart" FUType=FUListNew Hint="Начальное состояние"}
NewFU={Mnemo="EgAleWait2" FUType=FUListNew Hint="Начальное состояние"}
NewFU={Mnemo="EgAleWait" FUType=FUListNew Hint="Начальное состояние"}
NewFU={Mnemo="VarAfter" FUType=FUListNew Hint="Начальное состояние"}
NewFU={Mnemo="FuncAfter" FUType=FUListNew Hint="Начальное состояние"}
NewFU={Mnemo="EgAleAfter" FUType=FUListNew Hint="Начальное состояние"}
NewFU={Mnemo="OperatWait" FUType=FUListNew Hint="Начальное состояние"}
NewFU={Mnemo="End" FUType=FUListNew Hint="Конечное состояние"}

NewFU={Mnemo="StreamManager" FUType=FUStreamManager Hint="Потоковый менеджер для потоковых АЛУ"}

MainBus.PartialResetSet \\ Запомнить число созданных ФУ
MainBus.ModeSet=2
// ---------------------

Sep*-4
Var
VarInt
BracketAtr#-1
PassAtr#-2

//Lex.ReceiverMkSet=LogCons.Out
//Lex.Lexing="//)"

//Stack.MarkAtrDef=0 // Атрибут линии по умолчанию

OpPriority.MkModeSet=0 // Отключить выполнение МК
OpPriority.Set= // Приоритет операций
//>{Sep="(" Sep=")" Sep="[" Sep="]"}
//>{Sep="!" Sep="~" Sep="++" Sep="--"}
//>{FUALUG.Set}
>{Sep="*" Sep="/" Sep="//" Sep="%" }
>{Sep="+" Sep="-" }
>{Sep="<<" Sep=">>" }
>{Sep="~" Sep="<>" Sep="<=>" Sep="<" Sep="<=" Sep=">" Sep=">=" }
>{Sep="&"}
>{Sep="^" }
>{Sep="|" }
>{Sep="&&"}
>{Sep="||"}
/*
OperateionTranslate.SuccessLineProgSet={Lex.OutMk=OpPriority.FindAnd LogCons.LnOut="Priority"}
OperateionTranslate.Set= // Операции для FUALU
>{Sep="+"  Stack.Lastttach={FUALUG.Sum}}
>{Sep="-"  Stack.Lastttach={FUALUG.Sub}}
>{Sep="*"  Stack.LastAttach={FUALUG.Mul}}
>{Sep="/"  Stack.LastAttach={FUALUG.Div}}
>{Sep="//" Stack.LastAttach={FUALUG.DivInt}}
>{Sep="%"  Stack.LastAttach={FUALUG.Remainder}}
>{Sep="**" Stack.LastAttach={FUALUG.Pow}}
>{Sep=">>" Stack.LastAttach={FUALUG.Sub}}
>{Sep="<<" Stack.LastAttach={FUALUG.Sub}}
>{Sep="&"  Stack.LastAttach={FUALUG.And}}
>{Sep="&&" Stack.LastAttach={FUALUG.AndBit}}
>{Sep="|"  Stack.LastAttach={FUALUG.Or}}
>{Sep="||" Stack.LastAttach={FUALUG.OrBit}}
>{Sep="^"  Stack.LastAttach={FUALUG.Xor}}
>{Sep="^^" Stack.LastAttach={FUALUG.XorBit}}
// Операции присвоения с аккмулированием
>{Sep="+="  Stack.LastLoadOut=temp Stack.LastCopyAttach={FUALUG.Set=temp(nil)! FUALUG.Sum}    Stack.LineCopyAddPrevLoadSet={FUALUG.Set}}
>{Sep="-="  Stack.LastLoadOut=temp Stack.LastCopyAttach={FUALUG.Set=temp(nil)! FUALUG.Sub}    Stack.LineCopyAddPrevLoadSet={FUALUG.Set}}
>{Sep="*="  Stack.LastLoadOut=temp Stack.LastCopyAttach={FUALUG.Set=temp(nil)! FUALUG.Mul}    Stack.LineCopyAddPrevLoadSet={FUALUG.Set}}
>{Sep="/="  Stack.LastLoadOut=temp Stack.LastCopyAttach={FUALUG.Set=temp(nil)! FUALUG.Div}    Stack.LineCopyAddPrevLoadSet={FUALUG.Set}}
>{Sep="//=" Stack.LastLoadOut=temp Stack.LastCopyAttach={FUALUG.Set=temp(nil)! FUALUG.DivInt} Stack.LineCopyAddPrevLoadSet={FUALUG.Set}}
>{Sep="%="  Stack.LastLoadOut=temp Stack.LastCopyAttach={FUALUG.Set=temp(nil)! FUALUG.Remainder} Stack.LineCopyAddPrevLoadSet={FUALUG.Set}}
>{Sep="**=" Stack.LastLoadOut=temp Stack.LastCopyAttach={FUALUG.Set=temp(nil)! FUALUG.Pow}    Stack.LineCopyAddPrevLoadSet={FUALUG.Set}}
>{Sep=">>=" Stack.LastLoadOut=temp Stack.LastCopyAttach={FUALUG.Set=temp(nil)! FUALUG.Sub}    Stack.LineCopyAddPrevLoadSet={FUALUG.Set}}
>{Sep="<<=" Stack.LastLoadOut=temp Stack.LastCopyAttach={FUALUG.Set=temp(nil)! FUALUG.Sub}    Stack.LineCopyAddPrevLoadSet={FUALUG.Set}}
>{Sep="&="  Stack.LastLoadOut=temp Stack.LastCopyAttach={FUALUG.Set=temp(nil)! FUALUG.And}    Stack.LineCopyAddPrevLoadSet={FUALUG.Set}}
>{Sep="&&=" Stack.LastLoadOut=temp Stack.LastCopyAttach={FUALUG.Set=temp(nil)! FUALUG.AndBit} Stack.LineCopyAddPrevLoadSet={FUALUG.Set}}
>{Sep="|="  Stack.LastLoadOut=temp Stack.LastCopyAttach={FUALUG.Set=temp(nil)! FUALUG.Or}     Stack.LineCopyAddPrevLoadSet={FUALUG.Set}}
>{Sep="||=" Stack.LastLoadOut=temp Stack.LastCopyAttach={FUALUG.Set=temp(nil)! FUALUG.OrBit}  Stack.LineCopyAddPrevLoadSet={FUALUG.Set}}
>{Sep="^="  Stack.LastLoadOut=temp Stack.LastCopyAttach={FUALUG.Set=temp(nil)! FUALUG.Xor}    Stack.LineCopyAddPrevLoadSet={FUALUG.Set}}
>{Sep="^^=" Stack.LastLoadOut=temp Stack.LastCopyAttach={FUALUG.Set=temp(nil)! FUALUG.XorBit} Stack.LineCopyAddPrevLoadSet={FUALUG.Set}}
*/

Lex.ReceiverMkSet=ALEStart.FindAnd
Lex.UnicAtrSet=Mnemo
Lex.UnicMkSet=MnemoTable.FindAnd

MnemoTable.LineAdd={Mnemo="i" Var=10} // Добавить описание переменной в таблицу мнемоник
MnemoTable.LineAdd={Mnemo="x" Var=8} // Добавить описание переменной в таблицу мнемоник
MnemoTable.LineAdd={Mnemo="y" Var=3} // Добавить описание переменной в таблицу мнемоник
MnemoTable.LineAdd={Mnemo="z" Var=20} // Добавить описание переменной в таблицу мнемоник

MnemoTable.FailProgSet={LogCons.LnOut="Mnemo" Lex.OutMk Lex.Stop}
MnemoTable.SuccessProgSet={MnemoTable.LineIpOutMk=Lex.SendToReceiver}

\**\ALEStart.Set=
>{Mk Lex.ReceiverMkSet=EgAleWait2.FindAnd
//	ALEManager.FieldClear
LogCons.OutLn="ALEStart Mk"
	ALEManager.GoupCreate
	ALEManager.GroupLastIndOutMk=ALEManager.IndGroupSet 
	ALEManager.DevAdd=FUStreamFloatALU 
	ALEManager.IndSet=0 
	ALEManager.MkSet=FUStreamFloatALU.ReceiverMkAdd // Установить МК для записи результата
	ALEStart.ReceivedLoadOutMk=ALEManager.MkExec}
>{Var Lex.ReceiverMkSet=VarAfter.FindAnd
//	ALEManager.FieldClear 
	ALEManager.GoupCreate
	ALEManager.DevLastAdd=FUStreamFloatALU
	ALEManager.IndSet=0
	ALEManager.MkSet=FUStreamFloatALU.OutVarAdd // Установить переменную для записи результата 
	ALEStart.ReceivedLoadOutMk=ALEManager.MkExec
LogCons.OutLn="ALEStart Var"

}
>{0 Lex.Stop LogCons.OutLn="Expression error" ALEStart.ReceivedOutMk=LogCons.OutLn}

\**\EgAleWait2.Set=
>{Sep="," Lex.ReceiverMkSet=EgAleWait.FindAnd}
>{Sep="=" Lex.ReceiverMkSet=EgAleAfter.FindAnd}
>{0 Lex.Stop LogCons.OutLn="'=' is expected"}

\**\VarAfter.Set=
>{Sep="," Lex.ReceiverMkSet=EgAleWaitFindAnd}
>{Sep="++" Lex.ReceiverMkSet=ALEStart.FindAnd
  LogCons.OutLn="++"
  ALEManager.DevLastIndOutMk=ALEManager.IndSet
  ALEManager.ExecDev={FUStreamFloatALU.Add=1} // Добавить +1
  MnemoTable.LineLoadOutMk=ALEManager.VarNameAdd // Добавить в менеджера мнемонику переменной
  ALEManager.VarMkAdd=FUStreamFloatALU.Add
  ALEManager.MkSet=FUStreamFloatALU.ContextOutMk
  ALEManager.MkExec=ALEManager.VarFuAdd
  }
>{Sep="--" Lex.ReceiverMkSet=ALEStart.FindAnd
  ALEManager.DevLastIndOutMk=ALEManager.IndSet
  ALEManager.ExecDev={FUStreamFloatALU.Add=-1} // Добавить +1
  MnemoTable.LineLoadOutMk=ALEManager.VarNameAdd // Добавить в менеджера мнемонику переменной
  ALEManager.VarMkAdd=FUStreamFloatALU.Add
  ALEManager.MkSet=FUStreamFloatALU.ContextOutMk
  ALEManager.MkExec=ALEManager.VarFuAdd
  }
>{Sep="+=" Lex.ReceiverMkSet=EgAleAfter.FindAnd ALEManager.IndSet=0 ALEManager.MkSet=FUStreamFloatALU.Add ALEStart.ReceivedLoadOutMk=ALEManager.MkExec}
>{Sep="-=" Lex.ReceiverMkSet=EgAleAfter.FindAnd ALEManager.IndSet=0 ALEManager.MkSet=FUStreamFloatALU.Sub1 ALEStart.ReceivedLoadOutMk=ALEManager.MkExec}
>{Sep="=" Lex.ReceiverMkSet=EgAleAfter.FindAnd }
>{0 Lex.Stop LogCons.OutLn="'=' is expected"}

\**\EgAleWait.Set=
>{Mk Lex.ReceiverMkSet=EgAleWait2.FindAnd}

\**\EgAleAfter.Set=
>{Sep="(" Lex.ReceiverMkSet=EgAleAfter.FindAnd}
>{Var Lex.ReceiverMkSet=OperatWait.FindAnd}
>{Const Lex.ReceiverMkSet=OperatWait.FindAnd}
>{Func Lex.ReceiverMkSet=FuncAfter.FindAnd}

\**\FuncAfter.Set=
>{Sep="(" Lex.ReceiverMkSet=EgAleAfter.FindAnd}
>{Var Lex.ReceiverMkSet=OperatWait.FindAnd}
>{Const Lex.ReceiverMkSet=OperatWait.FindAnd}

\**\OperatWait.Set=
>{Sep=")" Lex.ReceiverMkSet=OperatWait.FindAnd}
>{Sep="]" Lex.ReceiverMkSet=OperatWait.FindAnd}
>{Sep=":" Lex.ReceiverMkSet=OperatWait.FindAnd}
>{Sep="," Lex.ReceiverMkSet=OperatWait.FindAnd}
//>{Operator Lex.ReceiverMkSet=EgAleAfter.FindEnd}
>{0 Lex.ReceiverMkSet=End.FindAnd}

Lex.ReceiverMkSet=ALEStart.FindAnd
Lex.Lexing="i ++"
//Lex.Lexing="i=0 i+=(5+5)/3"
//Lex.Lexing="i=10 i=i=(2*(10+2))+5"
//Lex.Lexing="7+5"
//ALUG.Set=0
//ALUG.OutMk=LogCons.LnOut
//MnemoTable.OutMk=LogCons.LnOut

ALEManager.IndSet=0
ALEManager.VarNameSet="x"
ALEManager.ValByNameSend=10