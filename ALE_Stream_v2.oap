NewFU={Mnemo="Main_Bus" MkBegRange=1000 FUType=FUBusNew} // Описание Bus

\\ Для создания индексного файла сначала надо запустить программу !!!!

 CapsManager.IndexVectCreate=20000
 CapsManager.IpIcIdOutMk=MainBus.IpIcIdSet
 CapsManager.IpIcIdOutMk=VariableManager.IpIcIdSet
 CapsManager.IpIcIdOutMk=ListSyntez.IpIcIdSet
 MainBus.ModeSet=1 
\\ -------------------------------------- \\
MainBus.FUTypeCorrectSet=-96 // Корректировка номера типа ФУ для переноса на новую ОА-платформу

NewFU={Mnemo="LogCons" FUType=FUConsNew Mnemo="Консоль для вывода соощений компилятора"}
NewFU={Mnemo="Lex" FUType=FULexNew}
NewFU={Mnemo="ALUG" FUType=FUALUG}
NewFU={Mnemo="Stack" FUType=FUListNew Hint="Стек приоритетов арифметического графа"}
NewFU={Mnemo="DevStack" FUType=FUListNew Hint="Стек ссылок на устройства"}
NewFU={Mnemo="MnemoTable" FUType=FUListNew Hint="Таблица мнемоник"}
NewFU={Mnemo="OpPriority" FUType=FUListNew Hint="Таблица приоритетов операций"}
NewFU={Mnemo="OperateionTranslate" FUType=FUListNew Hint="Транслирование операций для FUALU"}
NewFU={Mnemo="ALEManager" FUType=FUStreamManager Hint="Транслирование операций для FUALU"}

NewFU={Mnemo="OperationAnalizVar" FUType=FUListNew Hint="Анализ оператора из стека для переменной"}
NewFU={Mnemo="OperationAnalizConst" FUType=FUListNew Hint="Анализ оператора из стека для константы"}
NewFU={Mnemo="OperationAnaliz" FUType=FUListNew Hint="Анализ оператора из стека для константы"}
NewFU={Mnemo="ALEStart" FUType=FUListNew Hint="Начальное состояние"}
NewFU={Mnemo="EqAleWait2" FUType=FUListNew Hint="Начальное состояние"}
NewFU={Mnemo="EqAleWait" FUType=FUListNew Hint="Начальное состояние"}
NewFU={Mnemo="VarAfter" FUType=FUListNew Hint="Состояние после приема переменной"}
NewFU={Mnemo="FuncAfter" FUType=FUListNew Hint="Состояние после приема фунцкии"}
NewFU={Mnemo="EqAleAfter" FUType=FUListNew Hint="Состояние после '='"}
NewFU={Mnemo="OperatWait" FUType=FUListNew Hint="Состояние ожидания операции"}
NewFU={Mnemo="End" FUType=FUListNew Hint="Конечное состояние"}

NewFU={Mnemo="StreamManager" FUType=FUStreamManager Hint="Потоковый менеджер для потоковых АЛУ"}

MainBus.PartialResetSet \\ Запомнить число созданных ФУ
MainBus.ModeSet=2
// ---------------------

Sep*-4
Var
VarInt
BracketAtr#-1
PassAtr#-2
Operand1
Operand2
FUAtr // Атрибут ФУ

//Lex.ReceiverMkSet=LogCons.Out
//Lex.Lexing="//)"

//Stack.MarkAtrDef=0 // Атрибут линии по умолчанию

OpPriority.MkModeSet=0 // Отключить выполнение МК
OpPriority.Set= // Приоритет операций
//>{Sep="(" Sep=")" Sep="[" Sep="]"}
//>{Sep="!" Sep="~" Sep="++" Sep="--"}
//>{FUALUG.Set}
>{Sep="*" Sep="/" Sep="//" Sep="%" }
>{Sep="+" Sep="-" }
>{Sep="<<" Sep=">>" }
>{Sep="~" Sep="<>" Sep="<=>" Sep="<" Sep="<=" Sep=">" Sep=">=" }
>{Sep="&"}
>{Sep="^" }
>{Sep="|" }
>{Sep="&&"}
>{Sep="||"}
/*
OperateionTranslate.SuccessLineProgSet={Lex.OutMk=OpPriority.FindAnd LogCons.LnOut="Priority"}
OperateionTranslate.Set= // Операции для FUALU
>{Sep="+"  Stack.Lastttach={FUALUG.Sum}}
>{Sep="-"  Stack.Lastttach={FUALUG.Sub}}
>{Sep="*"  Stack.LastAttach={FUALUG.Mul}}
>{Sep="/"  Stack.LastAttach={FUALUG.Div}}
>{Sep="//" Stack.LastAttach={FUALUG.DivInt}}
>{Sep="%"  Stack.LastAttach={FUALUG.Remainder}}
>{Sep="**" Stack.LastAttach={FUALUG.Pow}}
>{Sep=">>" Stack.LastAttach={FUALUG.Sub}}
>{Sep="<<" Stack.LastAttach={FUALUG.Sub}}
>{Sep="&"  Stack.LastAttach={FUALUG.And}}
>{Sep="&&" Stack.LastAttach={FUALUG.AndBit}}
>{Sep="|"  Stack.LastAttach={FUALUG.Or}}
>{Sep="||" Stack.LastAttach={FUALUG.OrBit}}
>{Sep="^"  Stack.LastAttach={FUALUG.Xor}}
>{Sep="^^" Stack.LastAttach={FUALUG.XorBit}}
// Операции присвоения с аккмулированием
>{Sep="+="  Stack.LastLoadOut=temp Stack.LastCopyAttach={FUALUG.Set=temp(nil)! FUALUG.Sum}    Stack.LineCopyAddPrevLoadSet={FUALUG.Set}}
>{Sep="-="  Stack.LastLoadOut=temp Stack.LastCopyAttach={FUALUG.Set=temp(nil)! FUALUG.Sub}    Stack.LineCopyAddPrevLoadSet={FUALUG.Set}}
>{Sep="*="  Stack.LastLoadOut=temp Stack.LastCopyAttach={FUALUG.Set=temp(nil)! FUALUG.Mul}    Stack.LineCopyAddPrevLoadSet={FUALUG.Set}}
>{Sep="/="  Stack.LastLoadOut=temp Stack.LastCopyAttach={FUALUG.Set=temp(nil)! FUALUG.Div}    Stack.LineCopyAddPrevLoadSet={FUALUG.Set}}
>{Sep="//=" Stack.LastLoadOut=temp Stack.LastCopyAttach={FUALUG.Set=temp(nil)! FUALUG.DivInt} Stack.LineCopyAddPrevLoadSet={FUALUG.Set}}
>{Sep="%="  Stack.LastLoadOut=temp Stack.LastCopyAttach={FUALUG.Set=temp(nil)! FUALUG.Remainder} Stack.LineCopyAddPrevLoadSet={FUALUG.Set}}
>{Sep="**=" Stack.LastLoadOut=temp Stack.LastCopyAttach={FUALUG.Set=temp(nil)! FUALUG.Pow}    Stack.LineCopyAddPrevLoadSet={FUALUG.Set}}
>{Sep=">>=" Stack.LastLoadOut=temp Stack.LastCopyAttach={FUALUG.Set=temp(nil)! FUALUG.Sub}    Stack.LineCopyAddPrevLoadSet={FUALUG.Set}}
>{Sep="<<=" Stack.LastLoadOut=temp Stack.LastCopyAttach={FUALUG.Set=temp(nil)! FUALUG.Sub}    Stack.LineCopyAddPrevLoadSet={FUALUG.Set}}
>{Sep="&="  Stack.LastLoadOut=temp Stack.LastCopyAttach={FUALUG.Set=temp(nil)! FUALUG.And}    Stack.LineCopyAddPrevLoadSet={FUALUG.Set}}
>{Sep="&&=" Stack.LastLoadOut=temp Stack.LastCopyAttach={FUALUG.Set=temp(nil)! FUALUG.AndBit} Stack.LineCopyAddPrevLoadSet={FUALUG.Set}}
>{Sep="|="  Stack.LastLoadOut=temp Stack.LastCopyAttach={FUALUG.Set=temp(nil)! FUALUG.Or}     Stack.LineCopyAddPrevLoadSet={FUALUG.Set}}
>{Sep="||=" Stack.LastLoadOut=temp Stack.LastCopyAttach={FUALUG.Set=temp(nil)! FUALUG.OrBit}  Stack.LineCopyAddPrevLoadSet={FUALUG.Set}}
>{Sep="^="  Stack.LastLoadOut=temp Stack.LastCopyAttach={FUALUG.Set=temp(nil)! FUALUG.Xor}    Stack.LineCopyAddPrevLoadSet={FUALUG.Set}}
>{Sep="^^=" Stack.LastLoadOut=temp Stack.LastCopyAttach={FUALUG.Set=temp(nil)! FUALUG.XorBit} Stack.LineCopyAddPrevLoadSet={FUALUG.Set}}
*/

Operations{Sep="=" Sep="+" Sep="-" Sep="/" Sep="*"}

\**\OperationAnalizVar.Set=
>{Sep="" Sep="(" EqAleAfter.ReceivedOutMk=Stack.LineCopyAdd}
>{Sep="+" 
LogCons.OutLn="OperationAnalizVar +"
  MnemoTable.LineFirstLoadOutMk=ALEManager.VarNameAdd // Добавить в менеджера мнемонику переменной
  ALEManager.VarMkAdd=FUStreamFloatALU.Add
  ALEManager.MkSet=FUStreamFloatALU.ContextOutMk
  ALEManager.MkExec=ALEManager.VarFuAdd
}
>{Sep="-" 
LogCons.OutLn="OperationAnalizVar -"
  MnemoTable.LineFirstLoadOutMk=ALEManager.VarNameAdd // Добавить в менеджера мнемонику переменной
  ALEManager.VarMkAdd=FUStreamFloatALU.Sub1
  ALEManager.MkSet=FUStreamFloatALU.ContextOutMk
  ALEManager.MkExec=ALEManager.VarFuAdd
}
>{Sep="*" 
LogCons.OutLn="OperationAnalizVar *"
  MnemoTable.LineFirstLoadOutMk=ALEManager.VarNameAdd // Добавить в менеджера мнемонику переменной
  ALEManager.VarMkAdd=FUStreamFloatALU.Mul
  ALEManager.MkSet=FUStreamFloatALU.ContextOutMk
  ALEManager.MkExec=ALEManager.VarFuAdd
}
>{Sep="/" 
LogCons.OutLn="OperationAnalizVar /"
  MnemoTable.LineFirstLoadOutMk=ALEManager.VarNameAdd // Добавить в менеджера мнемонику переменной
  ALEManager.VarMkAdd=FUStreamFloatALU.Div1
  ALEManager.MkSet=FUStreamFloatALU.ContextOutMk
  ALEManager.MkExec=ALEManager.VarFuAdd
}

\**\OperationAnalizConst.Set=
>{Sep="" Sep="(" EqAleAfter.ReceivedOutMk=Stack.LineCopyAdd}
>{Sep="+" 
LogCons.OutLn="OperationAnalizConst +"
	ALEManager.MkLastSet=FUStreamFloatALU.Add
	EqAleAfter.ReceivedLoadOutMk=ALEManager.MkLastExec
}
>{Sep="-" 
LogCons.OutLn="OperationAnalizConst -"
	ALEManager.MkLastSet=FUStreamFloatALU.Sub1
	EqAleAfter.ReceivedLoadOutMk=ALEManager.MkLastExec
}
>{Sep="*" 
LogCons.OutLn="OperationAnalizConst *"
	ALEManager.MkLastSet=FUStreamFloatALU.Mul
	EqAleAfter.ReceivedLoadOutMk=ALEManager.MkLastExec
}
>{Sep="/" 
LogCons.OutLn="OperationAnalizConst /"
	ALEManager.MkLastSet=FUStreamFloatALU.Div1
	EqAleAfter.ReceivedLoadOutMk=ALEManager.MkLastExec
}



Lex.ReceiverMkSet=ALEStart.FindAnd
Lex.UnicAtrSet=Mnemo
Lex.UnicMkSet=MnemoTable.FindAnd

MnemoTable.LineAdd={Mnemo="i" Var=10} // Добавить описание переменной в таблицу мнемоник
MnemoTable.LineAdd={Mnemo="x" Var=8} // Добавить описание переменной в таблицу мнемоник
MnemoTable.LineAdd={Mnemo="y" Var=3} // Добавить описание переменной в таблицу мнемоник
MnemoTable.LineAdd={Mnemo="z" Var=20} // Добавить описание переменной в таблицу мнемоник
MnemoTable.LineAdd={Mnemo="z" Var=20} // Добавить описание переменной в таблицу мнемоник
MnemoTable.LineAdd={Mnemo="Cons" Mk=LogCons.OutLn} // Добавить описание переменной в таблицу мнемоник

MnemoTable.FailProgSet={LogCons.LnOut="Mnemo faul" Lex.OutMk Lex.Stop}
MnemoTable.SuccessProgSet={\*LogCons.Out="Mnemo1 " MnemoTable.LineIpOutMk=LogCons.OutLn*\ MnemoTable.LineIpOutMk=Lex.SendToReceiver}

Stack.LineCopyAdd={Sep=""} // Символ дна стека

\**\ALEStart.Set=
>{Mk Lex.ReceiverMkSet=EqAleWait2.FindAnd
//	ALEManager.FieldClear
	ALEManager.GoupCreate
	ALEManager.GroupLastIndOutMk=ALEManager.IndGroupSet 
	ALEManager.DevLastAdd=FUStreamFloatALU 
	ALEManager.IndSet=0 
	ALEManager.MkSet=FUStreamFloatALU.ReceiverMkAdd // Установить МК для записи результата
	ALEStart.ReceivedLoadOutMk=ALEManager.MkExec}
>{Var Lex.ReceiverMkSet=VarAfter.FindAnd
//	ALEManager.FieldClear 
	ALEManager.GoupCreate
	ALEManager.DevLastAdd=FUStreamFloatALU
	ALEManager.IndSet=0
	ALEManager.MkSet=FUStreamFloatALU.OutVarAdd // Установить переменную для записи результата 
	ALEStart.ReceivedLoadOutMk=ALEManager.MkExec
LogCons.OutLn="ALEStart Var"

}
>{0 Lex.Stop LogCons.OutLn="Expression error" ALEStart.ReceivedOutMk=LogCons.OutLn}

\**\EqAleWait2.Set=
>{Sep="," Lex.ReceiverMkSet=EqAleWait.FindAnd}
>{Sep="=" Lex.ReceiverMkSet=EqAleAfter.FindAnd
	LogCons.OutLn="EqAleWait2 ="
	Stack.LineCopyAdd={Sep="="}
	DevStack.LineCopyAdd={FUAtr}
     ALEManager.IndLastOutMk=DevStack.LastLoadSet // Поместить ссылка на конечное ФУ в стек ФУ
DevStack.OutMk=LogCons.OutLn
	}
>{0 Lex.Stop LogCons.OutLn="'=' is expected"}

\**\VarAfter.Set=
>{Sep="," Lex.ReceiverMkSet=EqAleWaitFindAnd}
>{Sep="++" Lex.ReceiverMkSet=ALEStart.FindAnd
  ALEManager.DevLastIndOutMk=ALEManager.IndSet
  ALEManager.ExecDev={FUStreamFloatALU.Add=1} // Добавить +1
  MnemoTable.LineFirstLoadOutMk=ALEManager.VarNameAdd // Добавить в менеджера мнемонику переменной
  ALEManager.VarMkAdd=FUStreamFloatALU.Add
  ALEManager.MkSet=FUStreamFloatALU.ContextOutMk
  ALEManager.MkExec=ALEManager.VarFuAdd
  }
>{Sep="--" Lex.ReceiverMkSet=ALEStart.FindAnd
  ALEManager.DevLastIndOutMk=ALEManager.IndSet
  ALEManager.ExecDev={FUStreamFloatALU.Add=-1} // Добавить +1
  MnemoTable.LineLoadOutMk=ALEManager.VarNameAdd // Добавить в менеджера мнемонику переменной
  ALEManager.VarMkAdd=FUStreamFloatALU.Add
  ALEManager.MkSet=FUStreamFloatALU.ContextOutMk
  ALEManager.MkExec=ALEManager.VarFuAdd
  }
>{Sep="+=" Lex.ReceiverMkSet=EqAleAfter.FindAnd ALEManager.IndSet=0 ALEManager.MkSet=FUStreamFloatALU.Add ALEStart.ReceivedLoadOutMk=ALEManager.MkExec}
>{Sep="-=" Lex.ReceiverMkSet=EqAleAfter.FindAnd ALEManager.IndSet=0 ALEManager.MkSet=FUStreamFloatALU.Sub1 ALEStart.ReceivedLoadOutMk=ALEManager.MkExec}
>{Sep="=" Lex.ReceiverMkSet=EqAleAfter.FindAnd }
>{0 Lex.Stop LogCons.OutLn="'=' is expected"}

\**\EqAleWait.Set=
>{Mk Lex.ReceiverMkSet=EqAleWait2.FindAnd}
>{Var Lex.ReceiverMkSet=EqAleWait2.FindAnd}


!!!!!!!!!!!!!!!!!!
\**\EqAleAfter.Set=
>{Sep="(" Lex.ReceiverMkSet=EqAleAfter.FindAnd
	Stack.LineCopyAdd={Sep="("}
}
>{Var LogCons.OutLn="EqAleAfter Var"  Lex.ReceiverMkSet=OperatWait.FindAnd
	Stack.FindOrLast={Sep="" Sep="=" Sep="("}
	Stack.SuccessExec={
		Stack.LineCopyAdd={Var}
		MnemoTable.LineLoadOutMk=Stack.LastLoadSet
		ProgStopAll
	}
	Stack.LastOutMk=OperationAnalizVar.FindAnd
}
>{Const LogCons.OutLn="EqAleAfter Const" Lex.ReceiverMkSet=OperatWait.FindAnd
	Stack.FindOrLast={Sep="" Sep="=" Sep="("}
	Stack.SuccessExec={
		Stack.LineCopyAdd={Const}
		MnemoTable.LineLoadOutMk=Stack.LastLoadSet
		EqAleAfter.ProgStopAll
	}
	Stack.LastOutMk=LogCons.OutLn
	Stack.LastOutMk=OperationAnalizConst.FindAnd
	Stack.LineCopyAdd={Const}
	MnemoTable.LineLoadOutMk=Stack.LastLoadSet
}
>{Func Lex.ReceiverMkSet=FuncAfter.FindAnd}


\**\OperationAnaliz.Set= // Анализ операции из стека
>{Sep="="
//	ALEManager.MkLastSet=FUStreamFloatALU.ReceiverAdd
//DevStack.LastDelMk
//	DevStack.OutMk=LogCons.OutLn
	DevStack.LastLoadOutMk=ALEManager.IndSet
	ALEManager.IndLastOutMk=ALEManager.Ind2Set
	ALEManager.MkSet=FUStreamFloatALU.ContextOutMk
	ALEManager.Mk2Set=FUStreamFloatALU.ReceiverAdd
	ALEManager.MkExec=ALEManager.Mk2Exec
	ALEManager.DevLastExec={FUStreamFloatALU.ReceiverMkAdd=FUStreamFloatALU.SetSend}
	DevStack.LastDelMk
	Stack.LastDel
LogCons.OutLn="OperationAnaliz ="
}
>{Sep="+" 
	ALEManager.DevLastExec={FUStreamFloatALU.ReceiverMkAdd=FUStreamFloatALU.Add}
	ALEManager.MkLastSet=FUStreamFloatALU.ReceiverAdd
	DevStack.LastLoadOutMk=ALEManager.MkLastExec
	DevStack.LastDelMk
	Stack.LastDel
LogCons.OutLn="OperationAnaliz +"
}
>{Sep="-" 
	ALEManager.DevLastExec={FUStreamFloatALU.ReceiverMkAdd=FUStreamFloatALU.Sub2}
	ALEManager.MkLastSet=FUStreamFloatALU.ReceiverAdd
	DevStack.LastLoadOutMk=ALEManager.MkLastExec
	DevStack.LastDelMk
	Stack.LastDel
}
>{Sep="*"
	ALEManager.DevLastExec={FUStreamFloatALU.ReceiverMkAdd=FUStreamFloatALU.Mul}
	ALEManager.MkLastSet=FUStreamFloatALU.ReceiverAdd
	DevStack.LastLoadOutMk=ALEManager.MkLastExec
	DevStack.LastDelMk
	Stack.LastDel
}
>{Sep="/"
	ALEManager.DevLastExec={FUStreamFloatALU.ReceiverMkAdd=FUStreamFloatALU.Div2}
	ALEManager.MkLastSet=FUStreamFloatALU.ReceiverAdd
	DevStack.LastLoadOutMk=ALEManager.MkLastExec
	DevStack.LastDelMk
	Stack.LastDel
}

!!!!!!!!!!!!!!!!!
\**\OperatWait.Set=
>{Sep=")" Lex.ReceiverMkSet=OperatWait.FindAnd
	Stack.ProgExec=BracketProg{
		Stack.FindOrLast={Sep="("}
		Stack.SuccessExec={
			Stack.PopMk
			ProgStopAll
			}
		Stack.PopMk DevStack.PopMk
		}
}
>{Sep="]" Lex.ReceiverMkSet=OperatWait.FindAnd}
>{Sep=":" Lex.ReceiverMkSet=OperatWait.FindAnd}
>{Sep="," Lex.ReceiverMkSet=OperatWait.FindAnd}
>{Sep="+" Lex.ReceiverMkSet=EqAleAfter.FindAnd LogCons.OutLn="OperatWait +"
	Stack.FindAndLast={Const}
	Stack.SuccessExec={
LogCons.OutLn="Stack const"
		ALEManager.DevLastAdd=FUStreamFloatALU // Создаем новое АЛУ
		ALEManager.MkLastSet=FUStreamFloatALU.Add
		Stack.LastLoadOutMk=ALEManager.MkLastExec
		Stack.LastDelMk
		Stack.LastOutMk=OperationAnaliz.FindAnd
		Stack.FindAndLast={Sep="("}
		Stack.LastPop=t
		Stack.SuccessExec={
			DevStack.LineCopyAdd={FUAtr}
			ALEManager.IndLastOutMk=DevStack.LastLoadSet
			}
		DevStack.LineCopyAdd={FUAtr}
		ALEManager.IndLastOutMk=Stack.LastLoadSet // Помещаем ссылку на новое АЛУ в стек укаазетелей на ФУ
		Stack.LineCopyAdd={Sep="+"}
		Stack.LineCopyAdd=t!
		OperatWait.ProgStopAll
	}
	Stack.FindAndLast={Var}
	Stack.SuccessExec={
LogCons.OutLn="Stack Var"
		ALEManager.DevLastAdd=FUStreamFloatALU // Создаем новое АЛУ
		ALEManager.IndLastOutMk=Stack.LastLoadSet // Помещаем ссылку на новое АЛУ в стек укаазетелей на ФУ
		MnemoTable.LineFirstLoadOutMk=ALEManager.VarNameAdd // Добавить в менеджера мнемонику переменной
		ALEManager.VarMkAdd=FUStreamFloatALU.Add
		ALEManager.MkLastSet=FUStreamFloatALU.ContextOutMk
		ALEManager.MkLastExec=ALEManager.VarFuAdd
		Stack.LastDelMk
LogCons.OutLn="OperationAnaliz Call"
Stack.LastOutMk=LogCons.OutLn
		Stack.LastOutMk=OperationAnaliz.FindAnd
		Stack.LineCopyAdd={Sep="+"}
		OperatWait.ProgStopAll
	}	
	Stack.FindOrLast=Operations // Поиск предыдущей операции
	Stack.SuccessExec={
LogCons.OutLn="Stack Operations"
		ALEManager.DevLastAdd=FUStreamFloatALU // Создаем новое АЛУ
		ALEManager.DevLastExec={Stack.LastLoadOutMk=FUStreamFloatALU.Add}
		
		ALEManager.MkLastSet=FUStreamFloatALU.ReceiverAdd
		DevStack.LastLoadOutMk=ALEManager.MkLastExec
	}
}
>{Sep="-" Lex.ReceiverMkSet=EqAleAfter.FindAnd
}
>{Sep="*" Lex.ReceiverMkSet=EqAleAfter.FindAnd
}
>{Sep="/" Lex.ReceiverMkSet=EqAleAfter.FindAnd
}

>{0 Lex.ReceiverMkSet=End.FindAnd}

\**\FuncAfter.Set=
>{Sep="(" Lex.ReceiverMkSet=EqAleAfter.FindAnd}
>{Var Lex.ReceiverMkSet=OperatWait.FindAnd}
>{Const Lex.ReceiverMkSet=OperatWait.FindAnd}

Lex.ReceiverMkSet=ALEStart.FindAnd
Lex.Lexing="Cons=i+(2+2)"
//Lex.Lexing="i++"
//Lex.Lexing="i=0 i+=(5+5)/3"
//Lex.Lexing="i=10 i=i=(2*(10+2))+5"
//Lex.Lexing="7+5"
//ALUG.Set=0
//ALUG.OutMk=LogCons.LnOut
//MnemoTable.OutMk=LogCons.LnOut

ALEManager.IndSet=0
ALEManager.VarNameSet="i"
ALEManager.ValByNameSend=15